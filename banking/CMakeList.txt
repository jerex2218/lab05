cmake_minimum_required(VERSION 3.4)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project(lab05)

include_directories(${PROJECT_NAME} .)

if (BUILD_TESTS)
# Загрузка и распаковка тестов
		configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
		execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  				RESULT_VARIABLE result
  				WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download 
  	)
		if(result)
  		message(FATAL_ERROR "CMake step for googletest failed: ${result}")
		endif()
		execute_process(COMMAND ${CMAKE_COMMAND} --build .
 		 								RESULT_VARIABLE result
 						 				WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
		if(result)
  		message(FATAL_ERROR "Build step for googletest failed: ${result}")
		endif()

		set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

		add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
                 EXCLUDE_FROM_ALL)

		if (CMAKE_VERSION VERSION_LESS 2.8.11)
  		include_directories("${gtest_SOURCE_DIR}/include")
		endif()

		file(GLOB ${PROJECT_NAME}_SOURCES *.cpp)
    file(GLOB ${PROJECT_NAME}_TEST_SOURCES tests/*.cpp)
    add_executable(test ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_TEST_SOURCES})
    target_link_libraries(test gtest gmock_main)
    add_test(NAME test COMMAND test)

endif()

option(COVERAGE "Coverage" OFF)

if (COVERAGE)
    target_compile_options(test PRIVATE --coverage)
    target_link_libraries(test --coverage)
endif()

language: cpp

before_install:
  - pip install --user cpp-coveralls
  - cd banking

before_script: cmake -H. -Bbuild -DBUILD_TESTS=ON -Bbuild -DCOVERAGE=ON
script: cmake --build build --target test && ./build/test

after_success: coveralls --root . -e build -e tests
